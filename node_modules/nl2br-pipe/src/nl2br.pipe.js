var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { Pipe, SecurityContext, VERSION } from '@angular/core';
import { DomSanitizer } from '@angular/platform-browser';
var Nl2BrPipe = /** @class */ (function () {
    function Nl2BrPipe(sanitizer) {
        this.sanitizer = sanitizer;
    }
    Nl2BrPipe.prototype.transform = function (value, sanitizeBeforehand) {
        if (typeof value !== 'string') {
            return value;
        }
        var result;
        var textParsed = value.replace(/(?:\r\n|\r|\n)/g, '<br />');
        if (!VERSION || VERSION.major === '2') {
            result = this.sanitizer.bypassSecurityTrustHtml(textParsed);
        }
        else if (sanitizeBeforehand) {
            result = this.sanitizer.sanitize(SecurityContext.HTML, textParsed);
        }
        else {
            result = textParsed;
        }
        return result;
    };
    Nl2BrPipe = __decorate([
        Pipe({
            name: 'nl2br'
        }),
        __metadata("design:paramtypes", [DomSanitizer])
    ], Nl2BrPipe);
    return Nl2BrPipe;
}());
export { Nl2BrPipe };
//# sourceMappingURL=nl2br.pipe.js.map